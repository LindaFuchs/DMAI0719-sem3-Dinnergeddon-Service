//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DinnergeddonWeb.AccountServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecurityStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecurityStamp {
            get {
                return this.SecurityStampField;
            }
            set {
                if ((object.ReferenceEquals(this.SecurityStampField, value) != true)) {
                    this.SecurityStampField = value;
                    this.RaisePropertyChanged("SecurityStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Lobby", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Lobby : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DinnergeddonWeb.AccountServiceReference.Account[] PlayersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DinnergeddonWeb.AccountServiceReference.Account[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountServiceReference.IAccountService")]
    public interface IAccountService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/FindById", ReplyAction="http://tempuri.org/IAccountService/FindByIdResponse")]
        DinnergeddonWeb.AccountServiceReference.Account FindById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/FindById", ReplyAction="http://tempuri.org/IAccountService/FindByIdResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account> FindByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/FindByEmail", ReplyAction="http://tempuri.org/IAccountService/FindByEmailResponse")]
        DinnergeddonWeb.AccountServiceReference.Account FindByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/FindByEmail", ReplyAction="http://tempuri.org/IAccountService/FindByEmailResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account> FindByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/FindByUsername", ReplyAction="http://tempuri.org/IAccountService/FindByUsernameResponse")]
        DinnergeddonWeb.AccountServiceReference.Account FindByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/FindByUsername", ReplyAction="http://tempuri.org/IAccountService/FindByUsernameResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account> FindByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/InsertAccount", ReplyAction="http://tempuri.org/IAccountService/InsertAccountResponse")]
        bool InsertAccount(DinnergeddonWeb.AccountServiceReference.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/InsertAccount", ReplyAction="http://tempuri.org/IAccountService/InsertAccountResponse")]
        System.Threading.Tasks.Task<bool> InsertAccountAsync(DinnergeddonWeb.AccountServiceReference.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/UpdateAccount", ReplyAction="http://tempuri.org/IAccountService/UpdateAccountResponse")]
        bool UpdateAccount(DinnergeddonWeb.AccountServiceReference.Account updatedAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/UpdateAccount", ReplyAction="http://tempuri.org/IAccountService/UpdateAccountResponse")]
        System.Threading.Tasks.Task<bool> UpdateAccountAsync(DinnergeddonWeb.AccountServiceReference.Account updatedAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/DeleteAccount", ReplyAction="http://tempuri.org/IAccountService/DeleteAccountResponse")]
        bool DeleteAccount(DinnergeddonWeb.AccountServiceReference.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/DeleteAccount", ReplyAction="http://tempuri.org/IAccountService/DeleteAccountResponse")]
        System.Threading.Tasks.Task<bool> DeleteAccountAsync(DinnergeddonWeb.AccountServiceReference.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetAccounts", ReplyAction="http://tempuri.org/IAccountService/GetAccountsResponse")]
        DinnergeddonWeb.AccountServiceReference.Account[] GetAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetAccounts", ReplyAction="http://tempuri.org/IAccountService/GetAccountsResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account[]> GetAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/IsInRole", ReplyAction="http://tempuri.org/IAccountService/IsInRoleResponse")]
        bool IsInRole(System.Guid accountId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/IsInRole", ReplyAction="http://tempuri.org/IAccountService/IsInRoleResponse")]
        System.Threading.Tasks.Task<bool> IsInRoleAsync(System.Guid accountId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddToRole", ReplyAction="http://tempuri.org/IAccountService/AddToRoleResponse")]
        bool AddToRole(System.Guid accountId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddToRole", ReplyAction="http://tempuri.org/IAccountService/AddToRoleResponse")]
        System.Threading.Tasks.Task<bool> AddToRoleAsync(System.Guid accountId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetRoles", ReplyAction="http://tempuri.org/IAccountService/GetRolesResponse")]
        string[] GetRoles(System.Guid accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetRoles", ReplyAction="http://tempuri.org/IAccountService/GetRolesResponse")]
        System.Threading.Tasks.Task<string[]> GetRolesAsync(System.Guid accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/VerifyCredentials", ReplyAction="http://tempuri.org/IAccountService/VerifyCredentialsResponse")]
        DinnergeddonWeb.AccountServiceReference.Account VerifyCredentials(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/VerifyCredentials", ReplyAction="http://tempuri.org/IAccountService/VerifyCredentialsResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account> VerifyCredentialsAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetEmailConfirmed", ReplyAction="http://tempuri.org/IAccountService/GetEmailConfirmedResponse")]
        bool GetEmailConfirmed(DinnergeddonWeb.AccountServiceReference.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetEmailConfirmed", ReplyAction="http://tempuri.org/IAccountService/GetEmailConfirmedResponse")]
        System.Threading.Tasks.Task<bool> GetEmailConfirmedAsync(DinnergeddonWeb.AccountServiceReference.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/SetEmailConfirmed", ReplyAction="http://tempuri.org/IAccountService/SetEmailConfirmedResponse")]
        void SetEmailConfirmed(DinnergeddonWeb.AccountServiceReference.Account account, bool confirmed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/SetEmailConfirmed", ReplyAction="http://tempuri.org/IAccountService/SetEmailConfirmedResponse")]
        System.Threading.Tasks.Task SetEmailConfirmedAsync(DinnergeddonWeb.AccountServiceReference.Account account, bool confirmed);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServiceChannel : DinnergeddonWeb.AccountServiceReference.IAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<DinnergeddonWeb.AccountServiceReference.IAccountService>, DinnergeddonWeb.AccountServiceReference.IAccountService {
        
        public AccountServiceClient() {
        }
        
        public AccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DinnergeddonWeb.AccountServiceReference.Account FindById(System.Guid id) {
            return base.Channel.FindById(id);
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account> FindByIdAsync(System.Guid id) {
            return base.Channel.FindByIdAsync(id);
        }
        
        public DinnergeddonWeb.AccountServiceReference.Account FindByEmail(string email) {
            return base.Channel.FindByEmail(email);
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account> FindByEmailAsync(string email) {
            return base.Channel.FindByEmailAsync(email);
        }
        
        public DinnergeddonWeb.AccountServiceReference.Account FindByUsername(string username) {
            return base.Channel.FindByUsername(username);
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account> FindByUsernameAsync(string username) {
            return base.Channel.FindByUsernameAsync(username);
        }
        
        public bool InsertAccount(DinnergeddonWeb.AccountServiceReference.Account account) {
            return base.Channel.InsertAccount(account);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAccountAsync(DinnergeddonWeb.AccountServiceReference.Account account) {
            return base.Channel.InsertAccountAsync(account);
        }
        
        public bool UpdateAccount(DinnergeddonWeb.AccountServiceReference.Account updatedAccount) {
            return base.Channel.UpdateAccount(updatedAccount);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAccountAsync(DinnergeddonWeb.AccountServiceReference.Account updatedAccount) {
            return base.Channel.UpdateAccountAsync(updatedAccount);
        }
        
        public bool DeleteAccount(DinnergeddonWeb.AccountServiceReference.Account account) {
            return base.Channel.DeleteAccount(account);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAccountAsync(DinnergeddonWeb.AccountServiceReference.Account account) {
            return base.Channel.DeleteAccountAsync(account);
        }
        
        public DinnergeddonWeb.AccountServiceReference.Account[] GetAccounts() {
            return base.Channel.GetAccounts();
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account[]> GetAccountsAsync() {
            return base.Channel.GetAccountsAsync();
        }
        
        public bool IsInRole(System.Guid accountId, string roleName) {
            return base.Channel.IsInRole(accountId, roleName);
        }
        
        public System.Threading.Tasks.Task<bool> IsInRoleAsync(System.Guid accountId, string roleName) {
            return base.Channel.IsInRoleAsync(accountId, roleName);
        }
        
        public bool AddToRole(System.Guid accountId, string roleName) {
            return base.Channel.AddToRole(accountId, roleName);
        }
        
        public System.Threading.Tasks.Task<bool> AddToRoleAsync(System.Guid accountId, string roleName) {
            return base.Channel.AddToRoleAsync(accountId, roleName);
        }
        
        public string[] GetRoles(System.Guid accountId) {
            return base.Channel.GetRoles(accountId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRolesAsync(System.Guid accountId) {
            return base.Channel.GetRolesAsync(accountId);
        }
        
        public DinnergeddonWeb.AccountServiceReference.Account VerifyCredentials(string name, string password) {
            return base.Channel.VerifyCredentials(name, password);
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Account> VerifyCredentialsAsync(string name, string password) {
            return base.Channel.VerifyCredentialsAsync(name, password);
        }
        
        public bool GetEmailConfirmed(DinnergeddonWeb.AccountServiceReference.Account account) {
            return base.Channel.GetEmailConfirmed(account);
        }
        
        public System.Threading.Tasks.Task<bool> GetEmailConfirmedAsync(DinnergeddonWeb.AccountServiceReference.Account account) {
            return base.Channel.GetEmailConfirmedAsync(account);
        }
        
        public void SetEmailConfirmed(DinnergeddonWeb.AccountServiceReference.Account account, bool confirmed) {
            base.Channel.SetEmailConfirmed(account, confirmed);
        }
        
        public System.Threading.Tasks.Task SetEmailConfirmedAsync(DinnergeddonWeb.AccountServiceReference.Account account, bool confirmed) {
            return base.Channel.SetEmailConfirmedAsync(account, confirmed);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountServiceReference.ILobbyService")]
    public interface ILobbyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreateLobby", ReplyAction="http://tempuri.org/ILobbyService/CreateLobbyResponse")]
        DinnergeddonWeb.AccountServiceReference.Lobby CreateLobby(string name, int playerLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreateLobby", ReplyAction="http://tempuri.org/ILobbyService/CreateLobbyResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Lobby> CreateLobbyAsync(string name, int playerLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreatePrivateLobby", ReplyAction="http://tempuri.org/ILobbyService/CreatePrivateLobbyResponse")]
        DinnergeddonWeb.AccountServiceReference.Lobby CreatePrivateLobby(string name, int playerLimit, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreatePrivateLobby", ReplyAction="http://tempuri.org/ILobbyService/CreatePrivateLobbyResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Lobby> CreatePrivateLobbyAsync(string name, int playerLimit, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/GetLobbies", ReplyAction="http://tempuri.org/ILobbyService/GetLobbiesResponse")]
        DinnergeddonWeb.AccountServiceReference.Lobby[] GetLobbies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/GetLobbies", ReplyAction="http://tempuri.org/ILobbyService/GetLobbiesResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Lobby[]> GetLobbiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinLobbyResponse")]
        bool JoinLobby(System.Guid accountId, System.Guid lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinLobbyResponse")]
        System.Threading.Tasks.Task<bool> JoinLobbyAsync(System.Guid accountId, System.Guid lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinPrivateLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinPrivateLobbyResponse")]
        bool JoinPrivateLobby(System.Guid accountId, System.Guid lobbyId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinPrivateLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinPrivateLobbyResponse")]
        System.Threading.Tasks.Task<bool> JoinPrivateLobbyAsync(System.Guid accountId, System.Guid lobbyId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/LeaveLobby", ReplyAction="http://tempuri.org/ILobbyService/LeaveLobbyResponse")]
        void LeaveLobby(System.Guid accountId, System.Guid lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/LeaveLobby", ReplyAction="http://tempuri.org/ILobbyService/LeaveLobbyResponse")]
        System.Threading.Tasks.Task LeaveLobbyAsync(System.Guid accountId, System.Guid lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/GetLobbyById", ReplyAction="http://tempuri.org/ILobbyService/GetLobbyByIdResponse")]
        DinnergeddonWeb.AccountServiceReference.Lobby GetLobbyById(System.Guid lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/GetLobbyById", ReplyAction="http://tempuri.org/ILobbyService/GetLobbyByIdResponse")]
        System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Lobby> GetLobbyByIdAsync(System.Guid lobbyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceChannel : DinnergeddonWeb.AccountServiceReference.ILobbyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyServiceClient : System.ServiceModel.ClientBase<DinnergeddonWeb.AccountServiceReference.ILobbyService>, DinnergeddonWeb.AccountServiceReference.ILobbyService {
        
        public LobbyServiceClient() {
        }
        
        public LobbyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LobbyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DinnergeddonWeb.AccountServiceReference.Lobby CreateLobby(string name, int playerLimit) {
            return base.Channel.CreateLobby(name, playerLimit);
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Lobby> CreateLobbyAsync(string name, int playerLimit) {
            return base.Channel.CreateLobbyAsync(name, playerLimit);
        }
        
        public DinnergeddonWeb.AccountServiceReference.Lobby CreatePrivateLobby(string name, int playerLimit, string password) {
            return base.Channel.CreatePrivateLobby(name, playerLimit, password);
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Lobby> CreatePrivateLobbyAsync(string name, int playerLimit, string password) {
            return base.Channel.CreatePrivateLobbyAsync(name, playerLimit, password);
        }
        
        public DinnergeddonWeb.AccountServiceReference.Lobby[] GetLobbies() {
            return base.Channel.GetLobbies();
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Lobby[]> GetLobbiesAsync() {
            return base.Channel.GetLobbiesAsync();
        }
        
        public bool JoinLobby(System.Guid accountId, System.Guid lobbyId) {
            return base.Channel.JoinLobby(accountId, lobbyId);
        }
        
        public System.Threading.Tasks.Task<bool> JoinLobbyAsync(System.Guid accountId, System.Guid lobbyId) {
            return base.Channel.JoinLobbyAsync(accountId, lobbyId);
        }
        
        public bool JoinPrivateLobby(System.Guid accountId, System.Guid lobbyId, string password) {
            return base.Channel.JoinPrivateLobby(accountId, lobbyId, password);
        }
        
        public System.Threading.Tasks.Task<bool> JoinPrivateLobbyAsync(System.Guid accountId, System.Guid lobbyId, string password) {
            return base.Channel.JoinPrivateLobbyAsync(accountId, lobbyId, password);
        }
        
        public void LeaveLobby(System.Guid accountId, System.Guid lobbyId) {
            base.Channel.LeaveLobby(accountId, lobbyId);
        }
        
        public System.Threading.Tasks.Task LeaveLobbyAsync(System.Guid accountId, System.Guid lobbyId) {
            return base.Channel.LeaveLobbyAsync(accountId, lobbyId);
        }
        
        public DinnergeddonWeb.AccountServiceReference.Lobby GetLobbyById(System.Guid lobbyId) {
            return base.Channel.GetLobbyById(lobbyId);
        }
        
        public System.Threading.Tasks.Task<DinnergeddonWeb.AccountServiceReference.Lobby> GetLobbyByIdAsync(System.Guid lobbyId) {
            return base.Channel.GetLobbyByIdAsync(lobbyId);
        }
    }
}
